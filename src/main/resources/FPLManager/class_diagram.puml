@startuml class_diagram

package java {
    package FPLManager.controller {
        class FPLManagerApp extends Application {
            + void start(Stage primaryStage)
        }
        note top of FPLManagerApp
            Application entry point
        end note

        class FPLManagerController {
            - savedTeamNameField: TextField
            - teamIdField: TextField
            - saveTeamNameField: TextField
            - saveTeamIdField: TextField
            - getSavedStatsButton: Button
            - getStatsButton: Button
            - saveUserButton: Button
            - statsTableView: TreeTableView<Player>
            - playerColumn: TreeTableColumn<Player, String>
            - teamColumn: TreeTableColumn<Player, String>
            - pointAverageColumn: TreeTableColumn<Player, String>
            - selectedPercentageColumn: TreeTableColumn<Player, String>
            - fitPercentageColumn: TreeTableColumn<Player, Integer>
            - pointsLastRoundColumn: TreeTableColumn<Player, Integer>
            - transfersColumn: TreeTableColumn<Player, Integer>
            - priceColumn: TreeTableColumn<Player, Double>
            - costChangeColumn: TreeTableColumn<Player, Double>
            - xgPer90Column: TreeTableColumn<Player, Double>
            - xaPer90Column: TreeTableColumn<Player, Double>
            - csPer90Column: TreeTableColumn<Player, Double>
            - deadlineLabel: Label
            - wildcardLabel: Label
            - benchboostLabel: Label
            - triplecaptainLabel: Label
            - freehitLabel: Label
            - assistantmanagerLabel: Label
            - availableTransfersLabel: Label
            - manager: Manager
            - dataManager: DataManager
            + initialize()
            - setupTableViewColumns()
            + handleButtonClickSaved()
            + handleButtonClickID()
            + handleSaveUser()
            - fetchAndDisplayManagerData(teamId: int)
            - displayGWinfo(manager: Manager)
            - displayTransfers(manager: Manager)
            - displayChips(manager: Manager)
            - displayManagerData(manager: Manager)
            - addFixtureColumns(players: ArrayList<Player>)
            - showAlert(title: String, content: String)
        }
        note top of FPLManagerController
            Controller for FXML file
        end note
    }
    package FPLManager.model {
              class Manager {
                - ID: int
                - nextGW: int
                - teamName: String
                - teamPlayersID: ArrayList<Integer>
                - teamPlayers: ArrayList<Player>
                - chipsAvailable: Map<String, Object>
                - availableTransfers: int
                - gwDeadline: String
                + Manager(managerID: int)
                - calculateAvailableTransfers(transferHistoryData: ArrayList<Integer>)
                - processChipsAvailable(chipsUsed: Map<String, Object>)
                - createTeamPlayers(allPlayerData: Map<Integer, Map<String, Object>>, fixtureData: Map<Integer, List<Map<String, Object>>>)
                + getName()
                + getTeamPlayersID()
                + getAvailableTransfers()
                + getNextGW()
                + getChipsAvailable()
                + getTeamPlayers()
                + getGWDeadline()
                + getID()
            }

            abstract class Player {
                - ID: int
                - nextGW: int
                - name: String
                - chanceOfPlaying: int
                - costChange: double
                - pointsLastRound: int
                - price: double
                - avgPoints: String
                - selectedBy: String
                - transferBalance: int
                - xG: double
                - xA: double
                - cleanSheets: double
                - teamID: int
                - team: String
                - fixtures: Map<Integer, List<String>>
                + Player(ID: int, nextGW: int, playerData: Map<String, Object>, fixtureData: Map<Integer, List<Map<String, Object>>>, data: DataManager)
                - getNameFromPlayerData(playerData: Map<String, Object>)
                - getIntFromPlayerData(playerData: Map<String, Object>, key: String)
                - getDoubleFromPlayerData(playerData: Map<String, Object>, key: String, divisor: double)
                - getStringFromPlayerData(playerData: Map<String, Object>, key: String)
                - getTransferBalance(playerData: Map<String, Object>)
                - getTeamName(teams: ArrayList<ArrayList<String>>)
                - processFixtures(fixtureData: Map<Integer, List<Map<String, Object>>>, teams: ArrayList<ArrayList<String>>)
                + getFixtureForGameweek(gameweek: int)
                + {static} getPositionFromPlayerData(playerData: Map<String, Object>, key: String)
                + getName()
                + getChanceOfPlaying()
                + getCostChange()
                + getPointsLastRound()
                + getPrice()
                + getAvgPoints()
                + getSelectedBy()
                + getTransferBalance()
                + getXG()
                + getXA()
                + getCleanSheetsPerGame()
                + getTeam()
                + getFixtures()
                + getID()
            }

            class Goalkeeper extends Player {
                + Goalkeeper(ID: int, nextGW: int, playerData: Map<String, Object>, fixtureData: Map<Integer, List<Map<String, Object>>>, data: DataManager)
            }

            class Defender extends Player {
                + Defender(ID: int, nextGW: int, playerData: Map<String, Object>, fixtureData: Map<Integer, List<Map<String, Object>>>, data: DataManager)
            }

            class Midfielder extends Player {
                + Midfielder(ID: int, nextGW: int, playerData: Map<String, Object>, fixtureData: Map<Integer, List<Map<String, Object>>>, data: DataManager)
            }

            class Forwarder extends Player {
                + Forwarder(ID: int, nextGW: int, playerData: Map<String, Object>, fixtureData: Map<Integer, List<Map<String, Object>>>, data: DataManager)
            }
            
            class DummyPlayer extends Player {
                + DummyPlayer()
            }

            class DataManager {
                - teams: ArrayList<ArrayList<String>>
                + DataManager()
                - loadTeams()
                + addUser(teamName: String, teamID: int)
                + findUser(teamName: String)
                + getTeams()
            }

            class DeadlineHandler {
                - gwDeadline: String
                + DeadlineHandler(gwInfo: List<Map<String, Object>>)
                - setGWDeadline(gwInfo: List<Map<String, Object>>)
                + getGWDeadLine()
            }

            interface IDataRetriever {
                + getTeamName()
                + getTeamPlayers()
                + getNextGW()
                + getPlayerData()
                + getNextGWInfo()
                + getTransferHistory()
                + getChips()
                + getRemainingFixtures()
            }

            class PlayerPositionComparator implements Comparator<Player> {
                + compare(player1: Player, player2: Player)
                + getPositionOrder(position: String)
            }

            class FPLAPI implements IDataRetriever {
                - managerID: int
                - teamName: String
                - teamPlayers: ArrayList<Integer>
                - nextGW: int
                - playerData: Map<Integer, Map<String, Object>>
                - nextGWInfo: List<Map<String, Object>>
                - transferHistory: ArrayList<Integer>
                - chips: Map<String, Object>
                - remainingFixtures: Map<Integer, List<Map<String, Object>>>
                + FPLAPI(managerID: int)
                + requestBuilder(requestString: String)
                + getResponse(requestString: String)
                + getJsonBody(requestString: String, typeReference: String)
                - setNextGW()
                - setTeamName()
                - setTeamPlayers()
                - setPlayerData()
                + setNextGWInfo()
                + setTransferHistory()
                + setChips()
                - setRemainingFixtures()
                + getManagerID()
                + getTeamName()
                + getTeamPlayers()
                + getNextGW()
                + getPlayerData()
                + getNextGWInfo()
                + getTransferHistory()
                + getChips()
                + getRemainingFixtures()
            }

            class HttpResponse {
                ' (Class details omitted for brevity)
            }

            PlayerPositionComparator ..|> Comparator : implements
            PlayerPositionComparator --> Player : uses
            FPLAPI ..|> IDataRetriever : implements
            FPLAPI --> HttpResponse : uses
            Manager --> Player: contains >
            Manager --> DataManager: uses >
            Player --> DataManager: uses >
            FPLAPI --> DataManager: uses >
            Manager --> DeadlineHandler: uses >
            DeadlineHandler --> FPLAPI: uses >
            Goalkeeper --|> Player : extends
            Defender --|> Player : extends
            Midfielder --|> Player : extends
            Forwarder --|> Player : extends
            DummyPlayer --|> Player : extends

    }
}

hide Goalkeeper methods
hide Defender methods
hide Midfielder methods
hide Forwarder methods
hide DummyPlayer methods

@enduml